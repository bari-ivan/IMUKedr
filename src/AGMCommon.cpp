#include "AGMCommon.h"


/**
* Конструктор класса
* 
* Инициализирует экземпляр класса для реализации 
* модулей работы с инерциальными сенсорами STMicroelectronics
* 
* @param CS - номер пина выбора микросхемы
*/
AGMCommon::AGMCommon(uint8_t CS) : IMUCommon(CS) {
  _valCTL5 = 0;
}

/**
* Деструктор класса
* 
* Уничтожает экземпляр класса для реализации 
* модулей работы с инерциальными сенсорами STMicroelectronics
* и очищает память
*/
AGMCommon::~AGMCommon() {
  // Объекты с динамическим выделением памяти отсутствуют
}

/**
* Запись в пятый контрольный регистр
* 
* Записывает значение в пятый контрольный регистр микросхемы.
* Ипользуется для первоначальной настройки и/или смены параметров
* работы микросхемы
*/
void AGMCommon::writeCTRL5() {
  writeRegister(CTRL_REG5, _valCTL5);
}

/**
* Чтение данных по оси X
* 
* Читает и объединяет составные данные измерений по оси X из двух 
* соответствующих регистров микросхемы
* 
* @return - результаты измерений по оси X
*/
int16_t AGMCommon::readX() {
  uint8_t buf[2];
  readMSBRegister(OUT_X, 2, buf);
  return ((int16_t)buf[1] << 8) | buf[0];
}

/**
* Чтение данных по оси Y
* 
* Читает и объединяет составные данные измерений по оси Y из двух 
* соответствующих регистров микросхемы
* 
* @return - результаты измерений по оси Y
*/
int16_t AGMCommon::readY() {
  uint8_t buf[2];
  readMSBRegister(OUT_Y, 2, buf);
  return ((int16_t)buf[1] << 8) | buf[0];
}

/**
* Чтение данных по оси Z
* 
* Читает и объединяет составные данные измерений по оси Z из двух 
* соответствующих регистров микросхемы
* 
* @return - результаты измерений по оси Z
*/
int16_t AGMCommon::readZ() {
  uint8_t buf[2];
  readMSBRegister(OUT_Z, 2, buf);
  return ((int16_t)buf[1] << 8) | buf[0];
}

/**
* Чтение данных по осям
* 
* Читает и объединяет составные данные измерений по всем трём осям
* и записывает их в 3 заданные переменные
* 
* @param x - ссылка на переменную, в которую будут записаны
*            результаты измерений по оси X
* @param y - ссылка на переменную, в которую будут записаны
*            результаты измерений по оси Y
* @param z - ссылка на переменную, в которую будут записаны
*            результаты измерений по оси Z
*/
void AGMCommon::readXYZ(int16_t *x, int16_t *y, int16_t *z) {
  uint8_t buf[6];
  readMSBRegister(OUT_X, 6, buf);
  
  *x = ((int16_t)buf[1] << 8) | buf[0];
  *y = ((int16_t)buf[3] << 8) | buf[2];
  *z = ((int16_t)buf[5] << 8) | buf[4];
}
