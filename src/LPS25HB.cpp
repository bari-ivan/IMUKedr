#include "LPS25HB.h"

/**
* Конструктор класса
* 
* Инициализирует экземпляр класса модуля управления 
* барометром LPS25HB с использованием протокола SPI ARDUINO.
*/
LPS25HB::LPS25HB() : BCommon(SS) {
  // Задание режима работы по умолчанию
  setMode(KDR_B_DR_NORMAL);

  // Установка коэффициентов преобразования данных
  _multiplicator = KDR_B_MULT_PRESSURE;
  _multiplicatorT = KDR_B_MULT_TEMPERATURE;
}

/**
* Конструктор класса
* 
* Инициализирует экземпляр класса модуля управления 
* барометром LPS25HB с использованием протокола SPI ARDUINO.
* 
* @param CS - номер пина выбора микросхемы
*/
LPS25HB::LPS25HB(uint8_t CS) : BCommon(CS) {
  // Задание режима работы по умолчанию
  setMode(KDR_B_DR_NORMAL);

  // Установка коэффициентов преобразования данных
  _multiplicator = KDR_B_MULT_PRESSURE;
  _multiplicatorT = KDR_B_MULT_TEMPERATURE;
}

/**
* Деструктор класса
* 
* Уничтожает экземпляр класса модуля управления 
* барометром LPS25HB с использованием протокола SPI ARDUINO
* и очищает память.
*/
LPS25HB::~LPS25HB() {
  // Объекты с динамическим выделением памяти отсутствуют
}

/**
* Проверка правильности подключения барометра и настроек SPI
* 
* Проверяет корректность подключения барометра и настроек шины SPI
* с помощью тестового опроса регистра "КТО Я" микросхемы.
* 
* @return - 1 при корректном подключении, 0 при ошибке
*/
uint8_t LPS25HB::testConnection() {
  return whoAmI() == LPS25HB_WHO_AM_I_REPLY;
}

/**
* Установка частоты выходных данных
* 
* Устанавливает частоту обновления выходных данных. Варианты заданы константами. 
* Стандартная частота по умолчанию - 7 Гц.
* Может изменяться как в меньшую сторону вплоть до 0, при котором микросхема засыпает, 
* так и в большую сторону вплоть до 25 Гц.
* 
* @param dataRate - частота обновления данных микросхемы
*/
void LPS25HB::setMode(int16_t dataRate) {
  // Очистка бит определения частоты и включения микросхемы
  _valCTL1 &= 0b00001111;

  switch (dataRate)
  {
  case KDR_B_DR_SLEEP:
    // --
    break;
  
  case KDR_B_DR_ONE_SHOT:
    // Включение микросхемы
    _valCTL1 |= (1 << 7);
    break;

  case KDR_B_DR_1_Hz:
    // Включение микросхемы
    _valCTL1 |= (1 << 7);
    // Установка частоты
    _valCTL1 |= (1 << 4);
    break;

  case KDR_B_DR_NORMAL:
    // Включение микросхемы
    _valCTL1 |= (1 << 7);
    // Установка частоты
    _valCTL1 |= (1 << 5);
    break;

  case KDR_B_DR_12_5_Hz:
    // Включение микросхемы
    _valCTL1 |= (1 << 7);
    // Установка частоты
    _valCTL1 |= (1 << 4);
    _valCTL1 |= (1 << 5);
    break;

  case KDR_B_DR_25_Hz:
    // Включение микросхемы
    _valCTL1 |= (1 << 7);
    // Установка частоты
    _valCTL1 |= (1 << 6);
    break;
  }

  writeCTRL1();
}

/**
* Получение давления в миллибарах
* 
* Получает последние данные о давлении из барометра
* и представлет их в миллибарах
* 
* @return - величина давления в миллибарах
*/
float LPS25HB::readPressureMillibars() {
  return readPressureRaw() / _multiplicator;
}

/**
* Получение давления в Паскалях
* 
* Получает последние данные о давлении из барометра
* и представлет их в Паскалях
* 
* @return - величина давления в Паскалях
*/
float LPS25HB::readPressurePascals() {
  return readPressureMillibars() * KDR_CONST_MILLIBARS_TO_PASCALS;
}

/**
* Получение давления в миллиметрах ртутного столба
* 
* Получает последние данные о давлении из барометра
* и представлет их в миллиметрах ртутного столба
* 
* @return - величина давления в миллиметрах ртутного столба
*/
float LPS25HB::readPressureMillimetersHg() {
return readPressureMillibars() * KDR_CONST_MILLIBARS_TO_MMHG;
}

/**
* Получение температуры в градусах по Цельсию
* 
* Получает последние данные о температуре из барометра
* и представлет их в градусах по Цельсию
* 
* @return - величина температуры в градусах по Цельсию
*/
float LPS25HB::readTemperatureC() {
  return readTemperatureRaw() / _multiplicatorT + KDR_B_RAW_TO_CELSIUS;
}

/**
* Получение температуры в градусах по Кельвину
* 
* Получает последние данные о температуре из барометра
* и представлет их в градусах по Кельвину
* 
* @return - величина температуры в градусах по Кельвину
*/
float LPS25HB::readTemperatureK() {
  return readTemperatureC() + KDR_CONST_CELSIUS_TO_KELVIN;
}

/**
* Получение температуры в градусах по Фаренгейту
* 
* Получает последние данные о температуре из барометра
* и представлет их в градусах по Фаренгейту
* 
* @return - величина температуры в градусах по Фаренгейту
*/
float LPS25HB::readTemperatureF() {
  return readTemperatureC() * KDR_CONST_CELSIUS_TO_FARENGHEIT_MULT + KDR_CONST_CELSIUS_TO_FARENGHEIT_INC;
}
